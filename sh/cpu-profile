#!/usr/bin/env sh

################################################################################
# Script name	: cpu-profile.sh 
# Author	: Valerio Casalino
# Description	: Use this script to tweak the power consuption of your laptop
################################################################################
error() { printf "${RED}E: %s${NCL}\\n" "$1" >&2 && exit 1; }
# Check if cpufrequctl is installed
command -v cpufreqctl > /dev/null || error "You'll need cpufreqctl"

### Global variables
SCRIPT_PATH=$( readlink -f "$0" )
SCRIPT_NAME=$( printf "%s" "$SCRIPT_PATH" | xargs basename )
RED="\033[31m"
NCL="\033[0m"
# Governors
CON="conservative"
PER="performance"
SCH="schedutil"
OND="ondemand"
# Available frequencies
AVAIL_FRQ=$( cpufreqctl --frequency --available | tr ' ' '\n' )
# Maximum number of cores
MAX_CORES=$( find /sys/devices/system/cpu/ -maxdepth 1 -name "*cpu[0-9]*" -type d | wc -l )

usage() {
  printf "Script path: %s\\n" "$SCRIPT_PATH" \
         "Usage %s [options] <arguments>\\n" "$SCRIPT_NAME" \
         "    -f|--freqency Max frequency for all of your cores.\\n" \
         "    -c|--cores    How many cores you wish to use. If the\\n" \
         "                  value exceeds the maximum cores the script\\n" \
         "                  will just stop without doing anything.\\n" \
         "    -g|--governor Choose your CPU governor. Posible\\n" \
         "                  values are: conservative, performance,\\n" \
         "                  schedutil or ondemand.\\n" \
         "    -p|--powertop Tune runtimes\\n" \
         "    -y|--yes      Do not prompt for confirmation.\\n" \
         "    -h|--help     Print this message.\\n"
}

confirm() {
  printf "Governor: %s\\nFrequency: %s\\nCores: %s\\n" "$GOV" "$FRQ" "$CRS"
  printf "Is it correct? [y/N]: " && read -r yn
  expr "$yn" : "[yY]" || return 1
  return 0
}

choose_governor() {
  printf "Choose governor:\\n1 %s\\n2 %s\\n3 %s\\n4 %s\\n" \
    "$CON" "$PER" "$SCH" "$OND" && read -r choice || return 1
  case $choice in
    1) GOV="$CON";;
    2) GOV="$PER";;
    3) GOV="$SCH";;
    4) GOV="$OND";;
    *) return 1  ;;
  esac
}

choose_frequency() {
  printf "Choose frequency:\\n"
  printf "%s" "$AVAIL_FRQ" | nl
  read -r choice || return 1
  [ "$choice" -le 0 ] && return 1
  FRQ=$( printf "%s" "$AVAIL_FRQ" | tail -n "$choice" | head -n 1 )
}

choose_cores() {
  printf "Choose core number [max %s]:\\n" "$MAX_CORES"
  read -r choice
  { [ "$choice" -lt 1 ] || [ "$choice" -gt "$MAX_CORES" ]; } && return 1
  CRS="$choice"
}

while [ "$#" -ne 0 ]; do case "$1" in
  -h|--help) usage && exit 0 ;;
  -y|--yes) YES="y" ;;
  -f|--frequency)
    [ -n "$FRQ" ] && error "Too many frequencies"
    shift
    printf "%s" "$AVAIL_FRQ" | grep "$1" >/dev/null || error "$1 not available."
    ;;
  -g|--governor)
    [ -n "$GOV" ] && error "Too many governors"
    shift
    expr "$1" : "$CON\|$PER\|$SCH\|$OND" || error "$1 is not accepted"
    GOV="$1"
    ;;
  -c|--cores)
    [ -n "$CRS" ] && error "Too many cores declarations"
    shift
    { [ "$1" -gt 1 ] && [ "$1" -le "$MAX_CORES" ]; } || error "Too many cores: $1"
    CRS="$1"
    ;;
  -p|--powertop)
    [ -n "$PWRTOP" ] && error "Too many powertop opt"
    PWRTOP="true"
    ;;
  *) usage && error "Unknown argument: $1" ;;
esac; shift; done

# Print out the driver
DRIVER=$( cpufreqctl --driver )
printf "Using '%s' driver\\n" "$DRIVER"

# Get choices if not already defined
[ -z "$GOV" ] && { choose_governor || error "Failed to get governor"; }
[ -z "$FRQ" ] && { choose_frequency || error "Failed to get frequency"; }
[ -z "$CRS" ] && { choose_cores || error "Failed to get cores"; }

# Get confirmation
[ -z "$YES" ] && { confirm "$GOV" "$FRQ" "$CRS" || error "Abort."; }

printf "Applying changes...\\n"
printf "Changing the Governor to: %s...\\n" "$GOV"
sudo cpufreqctl --governor --set="$GOV" > /dev/null 2>&1 || error "Failed to set governor"

printf "Changing max Frequency to: %s\\n" "$FRQ"
sudo cpufreqctl --frequency-max --set="$FRQ" > /dev/null 2>&1 || error "Failed to set frequency"

MAX_CORES=$(( MAX_CORES-1 ))
printf "Setting up %s cores\\n" "$CRS"
for i in $( seq "$CRS" "$MAX_CORES" ); do 
	sudo cpufreqctl --off --core="$i" || error "Error turning off core $i"
done
CRS=$(( CRS-1 ))
for i in $( seq 1 "$CRS" ); do 
	sudo cpufreqctl --on --core="$i" || error "Error turning on core $i"
done

[ -n "$PWRTOP" ] && { enable_powertop > /dev/null || error "Error in runtimes"; }
